package messageHandler

import (
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	"huoqiang/bot/messageHandler/plain"

	"github.com/SevereCloud/vksdk/v2/api"
	"github.com/SevereCloud/vksdk/v2/object"
	"github.com/SevereCloud/vksdk/v2/events"
)

const battleReportStart = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏—Ç–≤—ã –∑–∞ "
const battleReportEnd = "–ò–ª–∏ –≤—Å—Ç–∞–Ω—å –Ω–∞ üîê –∑–∞—â–∏—Ç—É —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
var profileIcons = [...]string {"üíª", "üí°", "üíµ", "üìà", "üíø", "üìÑ", "üíΩ", "üìë", "üîò", "üí∏", "üî•", "üîã", "üì°", "üíæ", "üì±", "üîé"}

func HandlePlain(messageObject events.MessageNewObject, vk *api.VK) {
	if (len(messageObject.Message.FwdMessages) > 0) {
		for _, message := range messageObject.Message.FwdMessages {
			if (strconv.Itoa(message.FromID) == os.Getenv("HW_ID")) {
				handleHwForward(message, &messageObject.Message, vk)
			}
		}
	}
}

func handleHwForward(message object.MessagesMessage, parentMessage *object.MessagesMessage, vk *api.VK) {
	messageDate := time.Unix(int64(message.Date), 0)
	senderId := parentMessage.FromID

	if (isProfileMessage(message.Text)) {
		if (os.Getenv("ENV") == "dev") {
			log.Println("That's a profile message from " + strconv.Itoa(senderId))
			log.Println("Contents: " + message.Text)
		}
		if (plain.HandleProfile(message.Text, senderId, messageDate)) {
			ReplyTo(parentMessage, "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω—è—Ç.", vk)
		}

		return
	}

	if (isBattleReport(message.Text)) {
		if (os.Getenv("ENV") == "dev") {
			log.Println("Battle report from " + strconv.Itoa(senderId))
			log.Println("Contents: " + message.Text)
		}

		reportResult := plain.HandleReport(message.Text, senderId, messageDate)
		log.Printf("%+v\n", reportResult)

		if (!reportResult.IsUserExist) {
			ReplyTo(parentMessage, "–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –ø—Ä–æ—Ñ–∏–ª—å.", vk)
			return
		}

		if (!reportResult.IsFirst) {
			ReplyTo(parentMessage, "–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ —ç—Ç—É –¥–∞—Ç—É.", vk)
			return
		}

		if (!reportResult.IsStored) {
			ReplyTo(parentMessage, "–û—Ç—á—ë—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.", vk)
			return
		}

		if (!reportResult.IsParticipated) {
			ReplyTo(parentMessage, "–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –£—á–∞—Å—Ç–∏–µ –≤ –±–∏—Ç–≤–∞—Ö –≤–∞–∂–Ω–æ –¥–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –±–∏—Ç–≤—ã!", vk)
			return
		}

		ReplyTo(parentMessage, "–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –±–∏—Ç–≤–µ!", vk)

		return
	}

	log.Println("bad message " + message.Text)
}

func isProfileMessage(messageText string) bool {
	for _, icon := range profileIcons {
		if (!strings.Contains(messageText, icon)) {
			return false;
		}
	}

	return true
}

func isBattleReport(messageText string) bool {
	if !strings.HasPrefix(messageText, battleReportStart) {
		return false
	}

	return strings.HasSuffix(messageText, battleReportEnd)
}
